"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5589],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),k=p(n),u=r,h=k["".concat(d,".").concat(u)]||k[u]||m[u]||l;return n?a.createElement(h,i(i({ref:t},s),{},{components:n})):a.createElement(h,i({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},8564:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return s},default:function(){return k}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={id:"DisabledControl",title:"Class: DisabledControl",sidebar_label:"DisabledControl",sidebar_position:0,custom_edit_url:null},d=void 0,p={unversionedId:"libraries/ng-core/api/classes/DisabledControl",id:"libraries/ng-core/api/classes/DisabledControl",isDocsHomePage:!1,title:"Class: DisabledControl",description:"Hierarchy",source:"@site/docs/libraries/ng-core/api/classes/DisabledControl.md",sourceDirName:"libraries/ng-core/api/classes",slug:"/libraries/ng-core/api/classes/DisabledControl",permalink:"/docs/libraries/ng-core/api/classes/DisabledControl",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"DisabledControl",title:"Class: DisabledControl",sidebar_label:"DisabledControl",sidebar_position:0,custom_edit_url:null},sidebar:"librariesSidebar",previous:{title:"ControlComponent",permalink:"/docs/libraries/ng-core/api/classes/ControlComponent"},next:{title:"LoadingService",permalink:"/docs/libraries/ng-core/api/classes/LoadingService"}},s=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Properties",id:"properties",children:[{value:"errors",id:"errors",children:[]},{value:"pristine",id:"pristine",children:[]},{value:"status",id:"status",children:[]},{value:"statusChanges",id:"statuschanges",children:[]},{value:"touched",id:"touched",children:[]},{value:"value",id:"value",children:[]},{value:"valueChanges",id:"valuechanges",children:[]}]},{value:"Accessors",id:"accessors",children:[{value:"asyncValidator",id:"asyncvalidator",children:[]},{value:"dirty",id:"dirty",children:[]},{value:"disabled",id:"disabled",children:[]},{value:"enabled",id:"enabled",children:[]},{value:"invalid",id:"invalid",children:[]},{value:"parent",id:"parent",children:[]},{value:"pending",id:"pending",children:[]},{value:"root",id:"root",children:[]},{value:"untouched",id:"untouched",children:[]},{value:"updateOn",id:"updateon",children:[]},{value:"valid",id:"valid",children:[]},{value:"validator",id:"validator",children:[]}]},{value:"Methods",id:"methods",children:[{value:"addAsyncValidators",id:"addasyncvalidators",children:[]},{value:"addValidators",id:"addvalidators",children:[]},{value:"clearAsyncValidators",id:"clearasyncvalidators",children:[]},{value:"clearValidators",id:"clearvalidators",children:[]},{value:"disable",id:"disable",children:[]},{value:"enable",id:"enable",children:[]},{value:"get",id:"get",children:[]},{value:"Retrieve a nested control",id:"retrieve-a-nested-control",children:[]},{value:"Retrieve a control in a FormArray",id:"retrieve-a-control-in-a-formarray",children:[]},{value:"getError",id:"geterror",children:[]},{value:"hasAsyncValidator",id:"hasasyncvalidator",children:[]},{value:"hasError",id:"haserror",children:[]},{value:"hasValidator",id:"hasvalidator",children:[]},{value:"markAllAsTouched",id:"markallastouched",children:[]},{value:"markAsDirty",id:"markasdirty",children:[]},{value:"markAsPending",id:"markaspending",children:[]},{value:"markAsPristine",id:"markaspristine",children:[]},{value:"markAsTouched",id:"markastouched",children:[]},{value:"markAsUntouched",id:"markasuntouched",children:[]},{value:"patchValue",id:"patchvalue",children:[]},{value:"registerOnChange",id:"registeronchange",children:[]},{value:"registerOnDisabledChange",id:"registerondisabledchange",children:[]},{value:"removeAsyncValidators",id:"removeasyncvalidators",children:[]},{value:"removeValidators",id:"removevalidators",children:[]},{value:"reset",id:"reset",children:[]},{value:"setAsyncValidators",id:"setasyncvalidators",children:[]},{value:"setErrors",id:"seterrors",children:[]},{value:"Manually set the errors for a control",id:"manually-set-the-errors-for-a-control",children:[]},{value:"setParent",id:"setparent",children:[]},{value:"setValidators",id:"setvalidators",children:[]},{value:"setValue",id:"setvalue",children:[]},{value:"updateValueAndValidity",id:"updatevalueandvalidity",children:[]}]}],m={toc:s};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"FormControl")),(0,l.kt)("p",{parentName:"li"},"\u21b3 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"DisabledControl"))))),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"new DisabledControl"),"()"),(0,l.kt)("h4",{id:"overrides"},"Overrides"),(0,l.kt)("p",null,"FormControl.constructor"),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/cognizone/ng-cognizone/blob/0401c67/libs/ng-core/src/lib/models/disabled-control.ts#L4"},"libs/ng-core/src/lib/models/disabled-control.ts:4")),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"errors"},"errors"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"errors"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"ValidationErrors")),(0,l.kt)("p",null,"An object containing any errors generated by failing validation,\nor null if there are no errors."),(0,l.kt)("h4",{id:"inherited-from"},"Inherited from"),(0,l.kt)("p",null,"FormControl.errors"),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:146"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"pristine"},"pristine"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"pristine"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"pristine")," if the user has not yet changed\nthe value in the UI."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"returns"))," True if the user has not yet changed the value in the UI; compare ",(0,l.kt)("inlineCode",{parentName:"p"},"dirty"),".\nProgrammatic changes to a control's value do not mark it dirty."),(0,l.kt)("h4",{id:"inherited-from-1"},"Inherited from"),(0,l.kt)("p",null,"FormControl.pristine"),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:154"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"status"},"status"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"status"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The validation status of the control. There are four possible\nvalidation status values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"VALID"),": This control has passed all validation checks."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"INVALID"),": This control has failed at least one validation check."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"PENDING"),": This control is in the midst of conducting a validation check."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"DISABLED"),": This control is exempt from validation checks.")),(0,l.kt)("p",null,"These status values are mutually exclusive, so a control cannot be\nboth valid AND invalid or invalid AND disabled."),(0,l.kt)("h4",{id:"inherited-from-2"},"Inherited from"),(0,l.kt)("p",null,"FormControl.status"),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:92"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"statuschanges"},"statusChanges"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"statusChanges"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,l.kt)("p",null,"A multicasting observable that emits an event every time the validation ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," of the control\nrecalculates."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"inherited-from-3"},"Inherited from"),(0,l.kt)("p",null,"FormControl.statusChanges"),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:190"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"touched"},"touched"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"touched"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if the control is marked as ",(0,l.kt)("inlineCode",{parentName:"p"},"touched"),"."),(0,l.kt)("p",null,"A control is marked ",(0,l.kt)("inlineCode",{parentName:"p"},"touched")," once the user has triggered\na ",(0,l.kt)("inlineCode",{parentName:"p"},"blur")," event on it."),(0,l.kt)("h4",{id:"inherited-from-4"},"Inherited from"),(0,l.kt)("p",null,"FormControl.touched"),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:169"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"value"},"value"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"value"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("p",null,"The current value of the control."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For a ",(0,l.kt)("inlineCode",{parentName:"li"},"FormControl"),", the current value."),(0,l.kt)("li",{parentName:"ul"},"For an enabled ",(0,l.kt)("inlineCode",{parentName:"li"},"FormGroup"),", the values of enabled controls as an object\nwith a key-value pair for each member of the group."),(0,l.kt)("li",{parentName:"ul"},"For a disabled ",(0,l.kt)("inlineCode",{parentName:"li"},"FormGroup"),", the values of all controls as an object\nwith a key-value pair for each member of the group."),(0,l.kt)("li",{parentName:"ul"},"For a ",(0,l.kt)("inlineCode",{parentName:"li"},"FormArray"),", the values of enabled controls as an array.")),(0,l.kt)("h4",{id:"inherited-from-5"},"Inherited from"),(0,l.kt)("p",null,"FormControl.value"),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:52"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"valuechanges"},"valueChanges"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"valueChanges"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,l.kt)("p",null,"A multicasting observable that emits an event every time the value of the control changes, in\nthe UI or programmatically. It also emits an event each time you call enable() or disable()\nwithout passing along {emitEvent: false} as a function argument."),(0,l.kt)("h4",{id:"inherited-from-6"},"Inherited from"),(0,l.kt)("p",null,"FormControl.valueChanges"),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:182"),(0,l.kt)("h2",{id:"accessors"},"Accessors"),(0,l.kt)("h3",{id:"asyncvalidator"},"asyncValidator"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"asyncValidator"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"AsyncValidatorFn")),(0,l.kt)("p",null,"Returns the function that is used to determine the validity of this control asynchronously.\nIf multiple validators have been added, this will be a single composed function.\nSee ",(0,l.kt)("inlineCode",{parentName:"p"},"Validators.compose()")," for additional information."),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"AsyncValidatorFn")),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:74"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"set")," ",(0,l.kt)("strong",{parentName:"p"},"asyncValidator"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"asyncValidatorFn"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Returns the function that is used to determine the validity of this control asynchronously.\nIf multiple validators have been added, this will be a single composed function.\nSee ",(0,l.kt)("inlineCode",{parentName:"p"},"Validators.compose()")," for additional information."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"asyncValidatorFn")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn"))))),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:75"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dirty"},"dirty"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"dirty"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"dirty")," if the user has changed the value\nin the UI."),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if the user has changed the value of this control in the UI; compare ",(0,l.kt)("inlineCode",{parentName:"p"},"pristine"),".\nProgrammatic changes to a control's value do not mark it dirty."),(0,l.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:162"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"disabled"},"disabled"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"disabled"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"disabled")," when its ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"DISABLED"),"."),(0,l.kt)("p",null,"Disabled controls are exempt from validation checks and\nare not included in the aggregate value of their ancestor\ncontrols."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if the control is disabled, false otherwise."),(0,l.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:131"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"enabled"},"enabled"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"enabled"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"enabled")," as long as its ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," is not ",(0,l.kt)("inlineCode",{parentName:"p"},"DISABLED"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if the control has any status other than 'DISABLED',\nfalse if the status is 'DISABLED'."),(0,l.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:141"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"invalid"},"invalid"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"invalid"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"invalid")," when its ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"INVALID"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if this control has failed one or more of its validation checks,\nfalse otherwise."),(0,l.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:110"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"parent"},"parent"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"parent"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"FormGroup")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"FormArray")),(0,l.kt)("p",null,"The parent control."),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"FormGroup")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"FormArray")),(0,l.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:79"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"pending"},"pending"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"pending"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"pending")," when its ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"PENDING"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if this control is in the process of conducting a validation check,\nfalse otherwise."),(0,l.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:119"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"root"},"root"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"root"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractControl")),(0,l.kt)("p",null,"Retrieves the top-level ancestor of this control."),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AbstractControl")),(0,l.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:595"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"untouched"},"untouched"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"untouched"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if the control has not been marked as touched"),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"untouched")," if the user has not yet triggered\na ",(0,l.kt)("inlineCode",{parentName:"p"},"blur")," event on it."),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:176"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"updateon"},"updateOn"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"updateOn"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"FormHooks")),(0,l.kt)("p",null,"Reports the update strategy of the ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractControl")," (meaning\nthe event on which the control updates itself).\nPossible values: ",(0,l.kt)("inlineCode",{parentName:"p"},"'change'")," | ",(0,l.kt)("inlineCode",{parentName:"p"},"'blur'")," | ",(0,l.kt)("inlineCode",{parentName:"p"},"'submit'"),"\nDefault value: ",(0,l.kt)("inlineCode",{parentName:"p"},"'change'")),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"FormHooks")),(0,l.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:197"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"valid"},"valid"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"valid"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A control is ",(0,l.kt)("inlineCode",{parentName:"p"},"valid")," when its ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"VALID"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if the control has passed all of its validation tests,\nfalse otherwise."),(0,l.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:101"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"validator"},"validator"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," ",(0,l.kt)("strong",{parentName:"p"},"validator"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"ValidatorFn")),(0,l.kt)("p",null,"Returns the function that is used to determine the validity of this control synchronously.\nIf multiple validators have been added, this will be a single composed function.\nSee ",(0,l.kt)("inlineCode",{parentName:"p"},"Validators.compose()")," for additional information."),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"ValidatorFn")),(0,l.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:67"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"set")," ",(0,l.kt)("strong",{parentName:"p"},"validator"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validatorFn"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Returns the function that is used to determine the validity of this control synchronously.\nIf multiple validators have been added, this will be a single composed function.\nSee ",(0,l.kt)("inlineCode",{parentName:"p"},"Validators.compose()")," for additional information."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validatorFn")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn"))))),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:68"),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"addasyncvalidators"},"addAsyncValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"addAsyncValidators"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validators"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Add an asynchronous validator or validators to this control, without affecting other\nvalidators."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("p",null,"Adding a validator that already exists will have no effect."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validators")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn"),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The new asynchronous validator function or functions to add to this control.")))),(0,l.kt)("h4",{id:"returns-14"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-7"},"Inherited from"),(0,l.kt)("p",null,"FormControl.addAsyncValidators"),(0,l.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:244"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"addvalidators"},"addValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"addValidators"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validators"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Add a synchronous validator or validators to this control, without affecting other validators."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("p",null,"Adding a validator that already exists will have no effect. If duplicate validator functions\nare present in the ",(0,l.kt)("inlineCode",{parentName:"p"},"validators")," array, only the first instance would be added to a form\ncontrol."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validators")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn"),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The new validator function or functions to add to this control.")))),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-8"},"Inherited from"),(0,l.kt)("p",null,"FormControl.addValidators"),(0,l.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:232"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clearasyncvalidators"},"clearAsyncValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"clearAsyncValidators"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Empties out the async validator list."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-9"},"Inherited from"),(0,l.kt)("p",null,"FormControl.clearAsyncValidators"),(0,l.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:301"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clearvalidators"},"clearValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"clearValidators"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Empties out the synchronous validator list."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("h4",{id:"returns-17"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-10"},"Inherited from"),(0,l.kt)("p",null,"FormControl.clearValidators"),(0,l.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:293"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"disable"},"disable"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"disable"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Disables the control. This means the control is exempt from validation checks and\nexcluded from the aggregate value of any parent. Its status is ",(0,l.kt)("inlineCode",{parentName:"p"},"DISABLED"),"."),(0,l.kt)("p",null,"If the control has children, all children are also disabled."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control propagates changes and emits events after the control is disabled. ",(0,l.kt)("em",{parentName:"td"}," ",(0,l.kt)("inlineCode",{parentName:"em"},"onlySelf"),": When true, mark only this control. When false or not supplied, marks all direct ancestors. Default is false. ")," ",(0,l.kt)("inlineCode",{parentName:"td"},"emitEvent"),": When true or not supplied (the default), both the ",(0,l.kt)("inlineCode",{parentName:"td"},"statusChanges")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"valueChanges")," observables emit events with the latest status and value when the control is disabled. When false, no events are emitted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.emitEvent?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-18"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-11"},"Inherited from"),(0,l.kt)("p",null,"FormControl.disable"),(0,l.kt)("h4",{id:"defined-in-26"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:413"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"enable"},"enable"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"enable"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"returns-19"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"overrides-1"},"Overrides"),(0,l.kt)("p",null,"FormControl.enable"),(0,l.kt)("h4",{id:"defined-in-27"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/cognizone/ng-cognizone/blob/0401c67/libs/ng-core/src/lib/models/disabled-control.ts#L9"},"libs/ng-core/src/lib/models/disabled-control.ts:9")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"get"},"get"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"get"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"path"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractControl")),(0,l.kt)("p",null,"Retrieves a child control given the control's name or path."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"usagenotes"))),(0,l.kt)("h3",{id:"retrieve-a-nested-control"},"Retrieve a nested control"),(0,l.kt)("p",null,"For example, to get a ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," control nested within a ",(0,l.kt)("inlineCode",{parentName:"p"},"person")," sub-group:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"this.form.get('person.name');"))),(0,l.kt)("p",null,"-OR-"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"this.form.get(['person', 'name']);"))),(0,l.kt)("h3",{id:"retrieve-a-control-in-a-formarray"},"Retrieve a control in a FormArray"),(0,l.kt)("p",null,"When accessing an element inside a FormArray, you can use an element index.\nFor example, to get a ",(0,l.kt)("inlineCode",{parentName:"p"},"price")," control from the first element in an ",(0,l.kt)("inlineCode",{parentName:"p"},"items")," array you can use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"this.form.get('items.0.price');"))),(0,l.kt)("p",null,"-OR-"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"this.form.get(['items', 0, 'price']);"))),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"path")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," (",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),")[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A dot-delimited string or array of string/number values that define the path to the control.")))),(0,l.kt)("h4",{id:"returns-20"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractControl")),(0,l.kt)("h4",{id:"inherited-from-12"},"Inherited from"),(0,l.kt)("p",null,"FormControl.get"),(0,l.kt)("h4",{id:"defined-in-28"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:532"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"geterror"},"getError"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getError"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"errorCode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"path?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"description")),"\nReports error data for the control with the given path."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"usagenotes")),"\nFor example, for the following ",(0,l.kt)("inlineCode",{parentName:"p"},"FormGroup"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"form = new FormGroup({\n  address: new FormGroup({ street: new FormControl() })\n});\n")),(0,l.kt)("p",null,"The path to the 'street' control from the root form would be 'address' -> 'street'."),(0,l.kt)("p",null,"It can be provided to this method in one of two formats:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"An array of string control names, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"['address', 'street']")),(0,l.kt)("li",{parentName:"ol"},"A period-delimited list of control names in one string, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"'address.street'"))),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"errorCode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The code of the error to check")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"path?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," (",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),")[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of control names that designates how to move from the current control to the control that should be queried for errors.")))),(0,l.kt)("h4",{id:"returns-21"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("p",null,"error data for that particular error. If the control or error is not present,\nnull is returned."),(0,l.kt)("h4",{id:"inherited-from-13"},"Inherited from"),(0,l.kt)("p",null,"FormControl.getError"),(0,l.kt)("h4",{id:"defined-in-29"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:560"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"hasasyncvalidator"},"hasAsyncValidator"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"hasAsyncValidator"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validator"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Check whether an asynchronous validator function is present on this control. The provided\nvalidator must be a reference to the exact same function that was provided."),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validator")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The asynchronous validator to check for presence. Compared by function     reference.")))),(0,l.kt)("h4",{id:"returns-22"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether the provided asynchronous validator was found on this control."),(0,l.kt)("h4",{id:"inherited-from-14"},"Inherited from"),(0,l.kt)("p",null,"FormControl.hasAsyncValidator"),(0,l.kt)("h4",{id:"defined-in-30"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:285"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"haserror"},"hasError"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"hasError"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"errorCode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"path?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"description")),"\nReports whether the control with the given path has the error specified."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"usagenotes")),"\nFor example, for the following ",(0,l.kt)("inlineCode",{parentName:"p"},"FormGroup"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"form = new FormGroup({\n  address: new FormGroup({ street: new FormControl() })\n});\n")),(0,l.kt)("p",null,"The path to the 'street' control from the root form would be 'address' -> 'street'."),(0,l.kt)("p",null,"It can be provided to this method in one of two formats:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"An array of string control names, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"['address', 'street']")),(0,l.kt)("li",{parentName:"ol"},"A period-delimited list of control names in one string, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"'address.street'"))),(0,l.kt)("p",null,"If no path is given, this method checks for the error on the current control."),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"errorCode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The code of the error to check")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"path?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," (",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),")[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of control names that designates how to move from the current control to the control that should be queried for errors.")))),(0,l.kt)("h4",{id:"returns-23"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"whether the given error is present in the control at the given path."),(0,l.kt)("p",null,"If the control is not present, false is returned."),(0,l.kt)("h4",{id:"inherited-from-15"},"Inherited from"),(0,l.kt)("p",null,"FormControl.hasError"),(0,l.kt)("h4",{id:"defined-in-31"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:591"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"hasvalidator"},"hasValidator"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"hasValidator"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validator"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Check whether a synchronous validator function is present on this control. The provided\nvalidator must be a reference to the exact same function that was provided."),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validator")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The validator to check for presence. Compared by function reference.")))),(0,l.kt)("h4",{id:"returns-24"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether the provided validator was found on this control."),(0,l.kt)("h4",{id:"inherited-from-16"},"Inherited from"),(0,l.kt)("p",null,"FormControl.hasValidator"),(0,l.kt)("h4",{id:"defined-in-32"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:276"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"markallastouched"},"markAllAsTouched"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"markAllAsTouched"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Marks the control and all its descendant controls as ",(0,l.kt)("inlineCode",{parentName:"p"},"touched"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsTouched()")),(0,l.kt)("h4",{id:"returns-25"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-17"},"Inherited from"),(0,l.kt)("p",null,"FormControl.markAllAsTouched"),(0,l.kt)("h4",{id:"defined-in-33"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:322"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"markasdirty"},"markAsDirty"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"markAsDirty"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Marks the control as ",(0,l.kt)("inlineCode",{parentName:"p"},"dirty"),". A control becomes dirty when\nthe control's value is changed through the UI; compare ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsTouched"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsTouched()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsUntouched()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsPristine()")),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control propagates changes and emits events after marking is applied. * ",(0,l.kt)("inlineCode",{parentName:"td"},"onlySelf"),": When true, mark only this control. When false or not supplied, marks all direct ancestors. Default is false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-26"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-18"},"Inherited from"),(0,l.kt)("p",null,"FormControl.markAsDirty"),(0,l.kt)("h4",{id:"defined-in-34"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:354"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"markaspending"},"markAsPending"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"markAsPending"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Marks the control as ",(0,l.kt)("inlineCode",{parentName:"p"},"pending"),"."),(0,l.kt)("p",null,"A control is pending while the control performs async validation."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," {@link AbstractControl.status}"),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control propagates changes and emits events after marking is applied. ",(0,l.kt)("em",{parentName:"td"}," ",(0,l.kt)("inlineCode",{parentName:"em"},"onlySelf"),": When true, mark only this control. When false or not supplied, marks all direct ancestors. Default is false. ")," ",(0,l.kt)("inlineCode",{parentName:"td"},"emitEvent"),": When true or not supplied (the default), the ",(0,l.kt)("inlineCode",{parentName:"td"},"statusChanges")," observable emits an event with the latest status the control is marked pending. When false, no events are emitted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.emitEvent?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-27"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-19"},"Inherited from"),(0,l.kt)("p",null,"FormControl.markAsPending"),(0,l.kt)("h4",{id:"defined-in-35"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:392"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"markaspristine"},"markAsPristine"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"markAsPristine"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Marks the control as ",(0,l.kt)("inlineCode",{parentName:"p"},"pristine"),"."),(0,l.kt)("p",null,"If the control has any children, marks all children as ",(0,l.kt)("inlineCode",{parentName:"p"},"pristine"),",\nand recalculates the ",(0,l.kt)("inlineCode",{parentName:"p"},"pristine")," status of all parent\ncontrols."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsTouched()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsUntouched()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsDirty()")),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control emits events after marking is applied. * ",(0,l.kt)("inlineCode",{parentName:"td"},"onlySelf"),": When true, mark only this control. When false or not supplied, marks all direct ancestors. Default is false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-28"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-20"},"Inherited from"),(0,l.kt)("p",null,"FormControl.markAsPristine"),(0,l.kt)("h4",{id:"defined-in-36"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:373"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"markastouched"},"markAsTouched"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"markAsTouched"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Marks the control as ",(0,l.kt)("inlineCode",{parentName:"p"},"touched"),". A control is touched by focus and\nblur events that do not change the value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsUntouched()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsDirty()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsPristine()")),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control propagates changes and emits events after marking is applied. * ",(0,l.kt)("inlineCode",{parentName:"td"},"onlySelf"),": When true, mark only this control. When false or not supplied, marks all direct ancestors. Default is false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-29"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-21"},"Inherited from"),(0,l.kt)("p",null,"FormControl.markAsTouched"),(0,l.kt)("h4",{id:"defined-in-37"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:315"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"markasuntouched"},"markAsUntouched"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"markAsUntouched"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Marks the control as ",(0,l.kt)("inlineCode",{parentName:"p"},"untouched"),"."),(0,l.kt)("p",null,"If the control has any children, also marks all children as ",(0,l.kt)("inlineCode",{parentName:"p"},"untouched"),"\nand recalculates the ",(0,l.kt)("inlineCode",{parentName:"p"},"touched")," status of all parent controls."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsTouched()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsDirty()")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"markAsPristine()")),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control propagates changes and emits events after the marking is applied. * ",(0,l.kt)("inlineCode",{parentName:"td"},"onlySelf"),": When true, mark only this control. When false or not supplied, marks all direct ancestors. Default is false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-30"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-22"},"Inherited from"),(0,l.kt)("p",null,"FormControl.markAsUntouched"),(0,l.kt)("h4",{id:"defined-in-38"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:338"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"patchvalue"},"patchValue"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"patchValue"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"options?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Patches the value of a control."),(0,l.kt)("p",null,"This function is functionally the same as {@link FormControl#setValue setValue} at this level.\nIt exists for symmetry with {@link FormGroup#patchValue patchValue} on ",(0,l.kt)("inlineCode",{parentName:"p"},"FormGroups")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"FormArrays"),", where it does behave differently."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"setValue")," for options"),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.emitEvent?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.emitModelToViewChange?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.emitViewToModelChange?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,l.kt)("h4",{id:"returns-31"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-23"},"Inherited from"),(0,l.kt)("p",null,"FormControl.patchValue"),(0,l.kt)("h4",{id:"defined-in-39"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:1938"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"registeronchange"},"registerOnChange"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"registerOnChange"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"fn"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Register a listener for change events."),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fn")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Function")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The method that is called when the value changes")))),(0,l.kt)("h4",{id:"returns-32"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-24"},"Inherited from"),(0,l.kt)("p",null,"FormControl.registerOnChange"),(0,l.kt)("h4",{id:"defined-in-40"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:1971"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"registerondisabledchange"},"registerOnDisabledChange"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"registerOnDisabledChange"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"fn"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Register a listener for disabled events."),(0,l.kt)("h4",{id:"parameters-17"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fn")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"isDisabled"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The method that is called when the disabled status changes.")))),(0,l.kt)("h4",{id:"returns-33"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-25"},"Inherited from"),(0,l.kt)("p",null,"FormControl.registerOnDisabledChange"),(0,l.kt)("h4",{id:"defined-in-41"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:1977"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"removeasyncvalidators"},"removeAsyncValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"removeAsyncValidators"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validators"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Remove an asynchronous validator from this control, without affecting other validators.\nValidators are compared by function reference; you must pass a reference to the exact same\nvalidator function as the one that was originally set. If a provided validator is not found, it\nis ignored."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("h4",{id:"parameters-18"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validators")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn"),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The asynchronous validator or validators to remove.")))),(0,l.kt)("h4",{id:"returns-34"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-26"},"Inherited from"),(0,l.kt)("p",null,"FormControl.removeAsyncValidators"),(0,l.kt)("h4",{id:"defined-in-42"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:268"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"removevalidators"},"removeValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"removeValidators"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validators"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Remove a synchronous validator from this control, without affecting other validators.\nValidators are compared by function reference; you must pass a reference to the exact same\nvalidator function as the one that was originally set. If a provided validator is not found,\nit is ignored."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("h4",{id:"parameters-19"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validators")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn"),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The validator or validators to remove.")))),(0,l.kt)("h4",{id:"returns-35"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-27"},"Inherited from"),(0,l.kt)("p",null,"FormControl.removeValidators"),(0,l.kt)("h4",{id:"defined-in-43"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:256"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"reset"},"reset"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"reset"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"formState?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"options?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Resets the form control, marking it ",(0,l.kt)("inlineCode",{parentName:"p"},"pristine")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"untouched"),", and setting\nthe value to null."),(0,l.kt)("h4",{id:"parameters-20"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"formState?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Resets the control with an initial value, or an object that defines the initial value and disabled state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control propagates changes and emits events after the value changes.  ",(0,l.kt)("em",{parentName:"td"}," ",(0,l.kt)("inlineCode",{parentName:"em"},"onlySelf"),": When true, each change only affects this control, and not its parent. Default is false. ")," ",(0,l.kt)("inlineCode",{parentName:"td"},"emitEvent"),": When true or not supplied (the default), both the ",(0,l.kt)("inlineCode",{parentName:"td"},"statusChanges")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"valueChanges")," observables emit events with the latest status and value when the control is reset. When false, no events are emitted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.emitEvent?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-36"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-28"},"Inherited from"),(0,l.kt)("p",null,"FormControl.reset"),(0,l.kt)("h4",{id:"defined-in-44"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:1962"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setasyncvalidators"},"setAsyncValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setAsyncValidators"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validators"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Sets the asynchronous validators that are active on this control. Calling this\noverwrites any existing asynchronous validators."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("p",null,"If you want to add a new validator without affecting existing ones, consider\nusing ",(0,l.kt)("inlineCode",{parentName:"p"},"addAsyncValidators()")," method instead."),(0,l.kt)("h4",{id:"parameters-21"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validators")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"AsyncValidatorFn"),"[]")))),(0,l.kt)("h4",{id:"returns-37"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-29"},"Inherited from"),(0,l.kt)("p",null,"FormControl.setAsyncValidators"),(0,l.kt)("h4",{id:"defined-in-45"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:219"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"seterrors"},"setErrors"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setErrors"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"errors"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Sets errors on a form control when running validations manually, rather than automatically."),(0,l.kt)("p",null,"Calling ",(0,l.kt)("inlineCode",{parentName:"p"},"setErrors")," also updates the validity of the parent control."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"usagenotes"))),(0,l.kt)("h3",{id:"manually-set-the-errors-for-a-control"},"Manually set the errors for a control"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"const login = new FormControl('someLogin');\nlogin.setErrors({\n  notUnique: true\n});\n\nexpect(login.valid).toEqual(false);\nexpect(login.errors).toEqual({ notUnique: true });\n\nlogin.setValue('someOtherLogin');\n\nexpect(login.valid).toEqual(true);\n")),(0,l.kt)("h4",{id:"parameters-22"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"errors")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"ValidationErrors"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.emitEvent?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,l.kt)("h4",{id:"returns-38"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-30"},"Inherited from"),(0,l.kt)("p",null,"FormControl.setErrors"),(0,l.kt)("h4",{id:"defined-in-46"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:501"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setparent"},"setParent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setParent"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"parent"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"parameters-23"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"parent")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"FormGroup")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"FormArray")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Sets the parent of the control")))),(0,l.kt)("h4",{id:"returns-39"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-31"},"Inherited from"),(0,l.kt)("p",null,"FormControl.setParent"),(0,l.kt)("h4",{id:"defined-in-47"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:443"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setvalidators"},"setValidators"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setValidators"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"validators"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Sets the synchronous validators that are active on this control.  Calling\nthis overwrites any existing synchronous validators."),(0,l.kt)("p",null,"When you add or remove a validator at run time, you must call\n",(0,l.kt)("inlineCode",{parentName:"p"},"updateValueAndValidity()")," for the new validation to take effect."),(0,l.kt)("p",null,"If you want to add a new validator without affecting existing ones, consider\nusing ",(0,l.kt)("inlineCode",{parentName:"p"},"addValidators()")," method instead."),(0,l.kt)("h4",{id:"parameters-24"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"validators")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"ValidatorFn"),"[]")))),(0,l.kt)("h4",{id:"returns-40"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-32"},"Inherited from"),(0,l.kt)("p",null,"FormControl.setValidators"),(0,l.kt)("h4",{id:"defined-in-48"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:208"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setvalue"},"setValue"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setValue"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"options?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Sets a new value for the form control."),(0,l.kt)("h4",{id:"parameters-25"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The new value for the control.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options that determine how the control propagates changes and emits events when the value changes. The configuration options are passed to the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.  ",(0,l.kt)("em",{parentName:"td"}," ",(0,l.kt)("inlineCode",{parentName:"em"},"onlySelf"),": When true, each change only affects this control, and not its parent. Default is false. ")," ",(0,l.kt)("inlineCode",{parentName:"td"},"emitEvent"),": When true or not supplied (the default), both the ",(0,l.kt)("inlineCode",{parentName:"td"},"statusChanges")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"valueChanges")," observables emit events with the latest status and value when the control value is updated. When false, no events are emitted. ",(0,l.kt)("em",{parentName:"td"}," ",(0,l.kt)("inlineCode",{parentName:"em"},"emitModelToViewChange"),": When true or not supplied  (the default), each change triggers an ",(0,l.kt)("inlineCode",{parentName:"em"},"onChange")," event to update the view. ")," ",(0,l.kt)("inlineCode",{parentName:"td"},"emitViewToModelChange"),": When true or not supplied (the default), each change triggers an ",(0,l.kt)("inlineCode",{parentName:"td"},"ngModelChange")," event to update the model.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.emitEvent?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.emitModelToViewChange?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.emitViewToModelChange?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-41"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-33"},"Inherited from"),(0,l.kt)("p",null,"FormControl.setValue"),(0,l.kt)("h4",{id:"defined-in-49"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:1923"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"updatevalueandvalidity"},"updateValueAndValidity"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"updateValueAndValidity"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Recalculates the value and validation status of the control."),(0,l.kt)("p",null,"By default, it also updates the value and validity of its ancestors."),(0,l.kt)("h4",{id:"parameters-26"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration options determine how the control propagates changes and emits events after updates and validity checks are applied. ",(0,l.kt)("em",{parentName:"td"}," ",(0,l.kt)("inlineCode",{parentName:"em"},"onlySelf"),": When true, only update this control. When false or not supplied, update all direct ancestors. Default is false. ")," ",(0,l.kt)("inlineCode",{parentName:"td"},"emitEvent"),": When true or not supplied (the default), both the ",(0,l.kt)("inlineCode",{parentName:"td"},"statusChanges")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"valueChanges")," observables emit events with the latest status and value when the control is updated. When false, no events are emitted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.emitEvent?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"opts.onlySelf?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-42"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"inherited-from-34"},"Inherited from"),(0,l.kt)("p",null,"FormControl.updateValueAndValidity"),(0,l.kt)("h4",{id:"defined-in-50"},"Defined in"),(0,l.kt)("p",null,"node_modules/@angular/forms/forms.d.ts:470"))}k.isMDXComponent=!0}}]);